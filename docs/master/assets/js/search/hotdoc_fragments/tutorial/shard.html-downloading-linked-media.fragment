fragment_downloaded_cb({"url": "tutorial/shard.html#downloading-linked-media", "fragment": "Downloading linked media \nAs a last tweak to our ingester it seems that one of the articles we are ingesting has an embedded video Art and the Every Day with Mike Winkelmann AKA beeple Again if you are doing this walkthrough later that article might not be in the batch you ingested. We want to download this video and save it as an asset as well. \nNOTE This works a bit differently from saving images as assets. The video doesn t get put into the hatch directly instead a placeholder is created and the video is downloaded later in the next processing step. This keeps the hatch creation time quick. It also allows transcoding the video in order to use a free codec or a different resolution. \nNOTE This section nearly doubles the size of the ingester code and requires a Vimeo account. If you aren t interested in downloading videos you can safely skip it or save it for later. \nAs might be expected from the Creative Commons blog the video has a license that makes it freely distributable and it is available for download from Vimeo. We ll add some code to our ingester that looks for embedded videos and saves their download location into the hatch. \nRun the following command to install the necessary packages \nWe use the vimeo package to access the Vimeo API in order to get the video s metadata and to make sure that it is OK to download. The youtube dl package is used to get a download URL for the video. Despite its name it s not only for YouTube. \nFirst of all since we are accessing the Vimeo API we ll need a Vimeo account and some credentials. Create an account if you don t have one then go to https developer.vimeo.com log in and click the Create App button in the top right corner. Fill in the required information and submit the form. After that your newly created app should show up under My Apps Click on it and then click on the Authentication tab to see the credentials. You need the client identifier and the client secret. Fill them into the appropriate places in the following code \nThis makes an IIFE called ensureVimeoClient with a private vimeo variable representing the Vimeo client object. We do it this way so that the ingester doesn t need to authenticate to Vimeo if there are no articles with videos to be ingested in the current batch. \nNext we note the structure of the embedded videos \nThis whole thing is discarded by Fathom when cleaning up the DOM so we need to add a Fathom rule that considers an embedded video part of the cluster of paragraph like elements \nThen we add some code to fix this up so that the videos are nicely in a figure element \nIn videosToProcess we now have a list of figure elements each containing an iframe which refers to a video that should be downloaded. \nIn order to download each video we first check the Vimeo API for all the metadata such as the title and license of the video and the tags that it is tagged with. We also use the Vimeo API to check that downloading is allowed. For performance but also as a courtesy to Vimeo we request only the fields that we actually use. \nSubsequently we use youtube dl to get a download URL and create a video asset using the libingester API function Libingester.util.get_embedded_video_asset \nThis function replaces the iframe with a special placeholder element. Videos aren t actually downloaded in libingester. This is so that you can implement your own compression or transcoding if need be. For this reason you can t play the video in Hatch Previewer. However we ll download the video in the section below with Basin. \nThe functions getVideoInfo licenseFromVimeoLicense and tagsFromVimeoTags are not given here but you can see them in the full code. \nNOTE Make sure to put this code after the code that cleans up the class attributes on all elements because Libingester.util.get_embedded_video_asset adds some new class attributes that are necessary in the final result. \nIf you run this code and view the result in Hatch Previewer you should be able to see the article with the placeholders where the videos were. \n"});