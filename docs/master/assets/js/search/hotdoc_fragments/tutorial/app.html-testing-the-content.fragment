fragment_downloaded_cb({"url": "tutorial/app.html#testing-the-content", "fragment": "Testing the content \nAt this point we have all our content and can put it in a pre fabricated app UI just to see how it looks. \nAn app first needs an app ID which is a reverse domain name We ll pick org.example.CreativeCommonsBlog for this tutorial. \nFor the app we need a description of the UI in a file called app.yaml. We build UIs using a declarative YAML syntax. Declarative here means that there s no programming language in which you can program the app s behavior only a description of which parts there are and how they fit together. \nWe ll describe this file format as well as use it to customize our app more in the next section. For now we ll just import a pre fabricated app UI template \nWe also need a theme which we ll cover in a following section. For now we ll create overrides.scss and import the default theme that goes along with the pre fabricated template we picked above \nWe also need a GResource bundle which for testing the app can simply be empty. GResource bundles are a way to make auxiliary files available to an app without worrying about what path they are installed at. You can read more in the documentation. To create it we ll write an empty GResource manifest file called app.gresource.xml \nBuild the GResource with this command \nFinally we ll need a content manifest file. Copy the output.shard and sets.shard from the previous section into the directory where you re building your app. Then generate the manifest with a tool called eminem \nTo run the app we use a script called ekn app runner which gets the app ID and the path to the GResource bundle. We also pass it a few options to tell it where to find the UI file the theme and the content \nYou should see something like this \n\n"});