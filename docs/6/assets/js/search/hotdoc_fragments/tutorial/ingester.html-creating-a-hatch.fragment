fragment_downloaded_cb({"url": "tutorial/ingester.html#creating-a-hatch", "fragment": "Creating a hatch \nWe re now going to render the ingested pages into one of libingester s article formats and then save the result in a hatch. An article format is a class that we can pass HTML snippets into and it will render a nice looking page that s suitable for embedding into our app. A hatch is libingester s term for the packaged up content it s a hatch that you open and drop content assets into and from there it goes for further processing. \nTo create the hatch we change our main function a bit and change our ingestArticle function to take the hatch as its first parameter. \nWe re going to use one of libingester s predefined article formats but it s also possible to write your own. The article format we ll use is called BlogArticle. The BlogArticle is itself an asset which we ll drop into the hatch. Here we create it and give it all the metadata that we determined earlier \nWe include some static metadata such as the license which we know because the whole blog is under that license \nWe also have to convert all the post s images to assets and drop them into the hatch. After all we are packaging up content for offline viewing so all the images have to be offline as well. \nWe take the imageURI we determined earlier and use that as the post s thumbnail image \nNext we pick a main image for the post. The main image is a feature of the BlogArticle format one image can be highlighted and given special placement at the top of the post. We ll take a guess that the first figure element in the post would make a good main image. We can always amend our guess later when we refine the ingester. \nNote that we have to remove the main image from the article body according to the documentation of set_main_image or else it will get rendered twice. \nThen we drop all the other image assets into the hatch \nFinally we give what remains of the HTML to the post asset and drop that into the hatch too \n"});