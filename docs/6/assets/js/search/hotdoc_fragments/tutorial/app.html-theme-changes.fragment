fragment_downloaded_cb({"url": "tutorial/app.html#theme-changes", "fragment": "Theme changes \nThe default Blog theme was apparently intended for apps with shorter category names our side menu doesn t look good right now. The category names are ellipsized and they don t have padding on the right hand that visually balances the padding on the left. \nTo experiment in a CSS playground and find out the CSS classes that need to be customized you can run the app with the GTK inspector. Prepend GTK_DEBUG interactive to the command that you run the app with to start the inspector. \nWe ll use the inspector to take a look at the side menu. Use Alt to switch to the inspector window and click the targeting tool on the side menu. This will bring up some basic information about the widget and you can see for example that it is about pixels wide. Change from the Miscellaneous screen to the CSS Selector screen and you can see that one of the CSS selectors for the outermost widget occupying that space is sidebar. \nThis gives us all the information we need to switch to the CSS tab in the inspector and live tweak the width. We ll use the full selector including the parent Layout.Sidebar module LayoutSidebar sidebar because a lot of the default theme is written on a module basis. If you use only sidebar then it could conflict with other modules that might have a sidebar selector and it also might not have enough specificity to override the default rule. Write in the CSS field \nWe can now copy this CSS into our overrides.scss. Make sure to put it below the import line so that it overrides the default theme. Try it and run the app again and you ll see the change take effect. \nNext we should make our logo a bit bigger to fit with the new width of the sidebar \nWe also want to change the background color of the sidebar since the background dark theme color is still a little bit light for the white Creative Commons logo. Let s use the accent dark color instead. Add \nto your overrides.scss file. \nNOTE Unfortunately since the GTK inspector uses plain CSS not SCSS the variables won t work there but you can still experiment with it by putting the color directly. \nLet s also add a bit of shadow to the side menu. Fire up the app again switch to the inspector and write in the CSS field \nYou can use the online box shadow generator as a visual tool that helps you generate the CSS box shadow syntax. Then you can fill it in to the inspector and see how it looks in the app. \nHere s an example of what the final side menu override might look like and the final product \n\n"});